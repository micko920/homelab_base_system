---
# This playbook contains common plays that will be run on all nodes.
#

# APT can be run from CRON jobs so just need to test lock deletion and then
# wait.
# - name: Wait for apt lock release
# wait_for:
#   path: /var/lib/apt/lists/lock
#   state: absent
#   timeout: 180
#   msg: "APT lock file still present. APT cron jobs are running."
# ignore_errors: true

- name: Wait for automatic system updates
  become: true
  shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 1; done;
  changed_when: false

- name: Wait for lock release on system packages front end
  become: true
  shell: while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done;
  changed_when: false

# - name: Wait for any possibly running unattended upgrade to finish
#   raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true

# Force control if locked not released
# - name: Remove APT lock file
#   file:
#     path: /var/lib/apt/lists/lock
#     state: absent
#   ignore_errors: true


# This gives a warning, see below. This can not be stopped. It is a bit of a
# chicken and egg problem. It resolves itself once through this file.  It
# relates to the apt, python-pip and pacakage ansible module.
#
# [WARNING]: Updating cache and auto-installing missing dependency: python-apt
# [WARNING]: Could not find aptitude. Using apt-get instead
# Only have this to shut the apt module up. Please remove once the ansible
# module stops using the apptitude tool
- name: Install aptitude using apt
  become: true
  become_user: root
  apt:
    name: aptitude
    state: present
    update_cache: true
    force_apt_get: true

- name: procps is installed
  become: true
  become_user: root
  apt:
    name: procps
    state: present
    update_cache: true

- name: Make sure pip is installed
  become: true
  become_user: root
  apt:
    name:
      - python3-pip
      - python-pip
    state: present


- name: resolve platform specific vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/vars'

- name: installing python os pkgs...
  become: true
  become_user: root
  apt:
    name: '{{ python_pkgs }}'
    state: present
    update_cache: true
  when: (python_pkgs is defined) and (python_pkgs|length > 0)

- name: remove old pip2 packages
  become: true
  become_user: root
  pip:
    name: '{{ rm_pip2_python_pkgs }}'
    executable: pip2
    state: absent
  when: (rm_pip3_python_pkgs is defined) and (rm_pip3_python_pkgs|length > 0)

- name: remove old python libs
  become: true
  become_user: root
  apt:
    name: '{{ rm_python_pkgs }}'
    state: absent
    autoremove: true
  when: (rm_python_pkgs is defined) and (rm_python_pkgs|length > 0)

- name: remove some pip3 packages
  become: true
  become_user: root
  pip:
    name: '{{ rm_pip3_python_pkgs }}'
    executable: pip3
    state: present
  when: (rm_pip3_python_pkgs is defined) and (rm_pip3_python_pkgs|length > 0)

- name: install pip3 packages
  become: true
  become_user: root
  pip:
    name: '{{ pip_python_pkgs }}'
    executable: pip3
    state: present
  when: (pip_python_pkgs is defined) and (pip_python_pkgs|length > 0)

- name: check PID 1
  become: true
  become_user: root
  stat:
    path: "/proc/1/exe"
    follow: false
  register: PID_1_EXE
  when: ansible_system is match("Linux")

- name: Set the PID_1 fact
  set_fact:
    systemd_pid_1: true
  when:
    - ansible_system is match("Linux")
    - PID_1_EXE.stat.islnk is defined and PID_1_EXE.stat.islnk
    - PID_1_EXE.stat.lnk_target|basename is match("systemd")

# One day when aptitude is not needed
# - name: remove aptitude
#   become: true
#   become_user: root
#   apt:
#     name: aptitude
#     state: absent
#     autoremove: true
